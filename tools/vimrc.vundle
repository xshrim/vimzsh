set encoding=utf-8
scriptencoding utf-8
"识别文件编码
set fileencodings=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
set fileencoding=utf-8
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim主题站点：http://bytefluent.com/vivify/
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示相关
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256
set nocompatible  "去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
"自定义高亮当前行
set cursorline
"hi CursorLine  cterm=NONE   ctermbg=darkred ctermfg=white
"hi CursorColumn cterm=NONE ctermbg=darkred ctermfg=white
"set cuc      " 高亮列
set shortmess=atI   " 启动的时候不显示那个援助乌干达儿童的提示
"set go=             " 不要图形按钮
"color desert     " 设置背景主题
"color maroloccio     " 设置背景主题
"color torte     " 设置背景主题
"colorscheme murphy
colorscheme molokai
"if has('gui_running')
"    set background=light
"else
"    set background=dark
"endif
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=/%03.3b]\ [POS=%l,%v]\ [LEN=%L]\ [%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}\ %{ALEGetStatusLine()}   "状态行显示的内容
set guifont=DejaVu\ Sans\ mono\ 11   " 设置字体
"autocmd InsertLeave * se nocul  " 用浅色高亮当前行
"autocmd InsertEnter * se cul    " 用浅色高亮当前行
"set whichwrap+=<,>,h,l   " 允许backspace和光标键跨越行边界(不建议)
set scrolloff=2     " 光标移动到buffer的顶部和底部时保持2行距离
set laststatus=2    " 启动显示状态行(1),总是显示状态行(2)
"set foldenable      " 允许折叠
"set foldmethod=manual   " 手动折叠
" 显示中文帮助
set helplang=cn
"语言设置
set langmenu=zh_CN.UTF-8
" 自动缩进
set autoindent
set cindent
" Tab键的宽度
set tabstop=2
" 统一缩进为4
set softtabstop=2
set shiftwidth=2
" 用空格代替制表符
set expandtab
" 在行和段开始处使用制表符
set smarttab
" 显示行号
set number
" 历史记录数
set history=10000
"搜索逐字符高亮
set hlsearch
set incsearch

" 命令行高度
set cmdheight=1

"设置映射延迟和按键延迟
set timeoutlen=100
set ttimeoutlen=10

" 侦测文件类型
filetype on
" 载入文件类型插件
filetype plugin on
" 为特定文件类型载入相关缩进文件
filetype indent on
" 保存全局变量
set viminfo+=!
" 带有如下符号的单词不要被换行分割
set iskeyword+=_,$,@,%,#,-
" 字符间插入的像素行数目
set ruler           " 显示标尺
set showcmd         " 输入的命令显示出来，看的清楚些
"将tab替换为空格
"nmap tt :%s/\t/    /g<CR>

syntax enable
syntax on

" 设置当文件被改动时自动载入
set autoread
augroup filetype_cpp
    autocmd!
    autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
augroup END
augroup filetype_dict
    autocmd!
    autocmd FileType php set dict+=~/.vim/dict/php_funclist.dict
    autocmd FileType css set dict+=~/.vim/dict/css.dict
    autocmd FileType c set dict+=~/.vim/dict/c.dict
    autocmd FileType cpp set dict+=~/.vim/dict/cpp.dict
    autocmd FileType scale set dict+=~/.vim/dict/scale.dict
    autocmd FileType javascript set dict+=~/.vim/dict/javascript.dict
    autocmd FileType html set dict+=~/.vim/dict/javascript.dict
    autocmd FileType html set dict+=~/.vim/dict/css.dict
augroup END
"代码补全
set completeopt=preview,menu
"set completeopt=menu
"共享剪贴板
set clipboard+=unnamed
"自动保存
set autowrite
"set ruler                   " 打开状态栏标尺
"set cursorline              " 突出显示当前行
set magic                   " 设置魔术
"set guioptions-=T           " 隐藏工具栏
"set guioptions-=m           " 隐藏菜单栏
set foldcolumn=0
set foldmethod=indent
set nofoldenable
set foldlevel=8

" 去掉输入错误的提示声音
set noerrorbells
"去掉按Enter键或其他命令以继续提示
set shortmess=atI
" 在处理未保存或只读文件的时候，弹出确认
set confirm
"禁止生成临时文件
set nobackup
set noswapfile
"搜索忽略大小写
set ignorecase
set linespace=0
" 增强模式中的命令行自动完成操作
set wildmenu
" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2
" 允许backspace和光标键跨越行边界
set whichwrap+=<,>,h,l

" 通过使用: commands命令，告诉我们文件的哪一行被改变过
set report=0
" 在被分割的窗口间显示空白，便于阅读
set fillchars=vert:\ ,stl:\ ,stlnc:\
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"键盘命令
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"修改文件为unix格式
map <F1> :call FormatClean()<CR>
func! FormatClean()
    exec 'set fileformat=unix'
    exec 'w'
endfunc

"统一缩进
nnoremap <F2> gg=G<CR>
"设置代码折叠
"map <F2> :call CodeFold()<CR>
"func! CodeFold()
    "exec 'set foldmethod=indent'
    "zC
    "zO
"endfunc
"去空行
nnoremap <F10> :g/^\s*$/d<CR>

"taglist
":nmap <silent> <F4> <ESC>:Tlist<RETURN>

"复制粘贴映射
"map <C-c> "+y
"map <C-v> "+p
"输入法
:let g:vimim_map='c-/'
":let g:vimim_cloud='sougou' " QQ云输入
:let g:vimim_punctuation=0  " 不用中文标点
":set pastetoggle=<F7>
:let g:vimim_cloud=-1
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）

"禁用箭头按键
"nnoremap <left> <Nop>
"nnoremap <right> <Nop>
"nnoremap <up> <Nop>
"nnoremap <down> <Nop>
"inoremap <left> <Nop>
"inoremap <right> <Nop>
"inoremap <up> <Nop>
"inoremap <down> <Nop>
"vnoremap <left> <Nop>
"vnoremap <right> <Nop>
"vnoremap <up> <Nop>
"vnoremap <down> <Nop>

"编辑模式下映射方向键使hjkl能移动光标
"inoremap <silent><C-H> <Left>
"inoremap <silent><C-L> <Right>
"inoremap <silent><C-J> <Down>
"inoremap <silent><C-K> <Up>

"支持滚轮
set mousemodel=popup
set mouse-=a
set selection=exclusive
set selectmode=mouse,key


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""或者使用快捷键映射手动添加：  map <F8> :call SetTitle()<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup new_file
    autocmd!
    autocmd BufNewFile *.[ch],*.hpp,*.sh,*.py,*.go,*.rb,*.php,*.java,*.jsp,*.html,*.htm,*.asp,*.ini,*.conf,*.sql,*.xml,*.css,*.js,*.cs,*.cpp exec ":call SetTitle()"
augroup END
"" autocmd BufNewFile *.[ch],*.hpp,*.sh,*.py,*.rb,*.php,*.java,*.jsp,*.html,*.htm,*.asp,*.ini,*.conf,*.sql,*.xml,*.css,*.js,*.cs,*.cpp exec ":call SetTitle()"

"加入注释
func SetComment(ext)
    let l:type = tolower(a:ext)
    if l:type ==? 'c' || l:type ==? 'h' || l:type ==? 'cpp' || l:type ==? 'hpp' || l:type ==? 'java' || l:type ==? 'php' || l:type ==? 'sql' || l:type ==? 'css' || l:type ==? 'js' || l:type ==? 'cs' || l:type ==? 'go'
        let l:head = '/*****************************************************************'
        let l:tail = '*****************************************************************/'
        let l:sym = '**'
    elseif l:type ==? 'sh' || l:type ==? 'py' || l:type ==? 'conf' || l:type ==? 'ini'
        let l:head = '##****************************************************************'
        let l:tail = '##****************************************************************'
        let l:sym = '#*'
    elseif l:type ==? 'htm' || l:type ==? 'html' || l:type ==? 'xml'
        let l:head = '<!--**************************************************************'
        let l:tail = '***************************************************************-->'
        let l:sym = '**'
    elseif l:type ==? 'jsp'
        let l:head = '<%--**************************************************************'
        let l:tail = '**************************************************************--%>'
        let l:sym = '**'
    elseif l:type ==? 'asp'
        let l:head = "'<%--**************************************************************"
        let l:tail = "'*************************************************************--%>"
        let l:sym = "'*"
    elseif l:type ==? 'rb'
        let l:head = '=begin ***********************************************************'
        let l:tail = '************************************************************* =end'
        let l:sym = '**'
    elseif l:type ==? 'pl'
        let l:head = '=pod *************************************************************'
        let l:tail = '************************************************************* =cut'
        let l:sym = '**'
    else
        let l:head = '##****************************************************************'
        let l:tail = '##****************************************************************'
        let l:sym = '##'
    endif

    call setline(1,l:head)
    call append(line('.'),   l:sym.'   Copyright (C) '.strftime('%Y').' All rights reserved.')
    call append(line('.')+1, l:sym.'   ')
    call append(line('.')+2, l:sym.'   文件名称：'.expand('%:t'))
    call append(line('.')+3, l:sym.'   创 建 者：Maple')
    call append(line('.')+4, l:sym.'   创建日期：'.strftime('%Y年%m月%d日'))
    call append(line('.')+5, l:sym.'   描    述：')
    call append(line('.')+6, l:sym.'')
    call append(line('.')+7, l:sym.'   更新日志：')
    call append(line('.')+8, l:sym.'')
    call append(line('.')+9, l:tail)

endfunc

"定义函数SetTitle，自动插入文件头
func SetTitle()
    let l:type = tolower(expand('%:e'))
    "call SetComment(l:type)
    if l:type ==? 'hpp'
        call append(line('.')+10, '#ifndef _'.toupper(expand('%:t:r')).'_H')
        call append(line('.')+11, '#define _'.toupper(expand('%:t:r')).'_H')
        call append(line('.')+12, '#ifdef __cplusplus')
        call append(line('.')+13, 'extern \"C\"')
        call append(line('.')+14, '{')
        call append(line('.')+15, '#endif')
        call append(line('.')+16, '')
        call append(line('.')+17, '#ifdef __cplusplus')
        call append(line('.')+18, '}')
        call append(line('.')+19, '#endif')
        call append(line('.')+20, '#endif //'.toupper(expand('%:t:r')).'_H')
        call append(line('.')+21, '')
    elseif l:type ==? 'h'
        call append(line('.')+10, '#ifndef _'.toupper(expand('%:t:r')).'_H')
        call append(line('.')+11, '#define _'.toupper(expand('%:t:r')).'_H')
        call append(line('.')+12, '')
        call append(line('.')+13, '#endif')
        call append(line('.')+14, '')
    elseif l:type ==? 'c'
        call append(line('.')+11, '#include<stdio.h>')
        call append(line('.')+12, '')
        call append(line('.')+13, '')
        call append(line('.')+14, 'int main(int argc, char *argv[]){')
        call append(line('.')+15, '')
        call append(line('.')+16, '\treturn 0;')
        call append(line('.')+17, '}')
    elseif l:type ==? 'cpp'
        call append(line('.')+10, '#include \"".expand("%:t:r").".h\"')
        call append(line('.')+11, '#include<iostream>')
        call append(line('.')+12, 'using namespace std;')
        call append(line('.')+13, '')
        call append(line('.')+14, '')
        call append(line('.')+15, 'int main(int argc, char *argv[]){')
        call append(line('.')+16, '')
        call append(line('.')+17, '\treturn 0;')
        call append(line('.')+18, '}')
    elseif l:type ==? 'sh'
        call append(line('.')+10, '#!/bin/bash')
        call append(line('.')+11, '')
    elseif l:type ==? 'py'
        call append(line('.')+10, '#!/usr/bin/env python')
        call append(line('.')+11, '# -*- coding: utf-8 -*-')
        call append(line('.')+12, '')
        call append(line('.')+13, 'import os')
        call append(line('.')+14, 'import sys')
        call append(line('.')+15, '')
        call append(line('.')+16, '')
        call append(line('.')+17, 'def main():')
        call append(line('.')+18, '\tpass')
        call append(line('.')+19, '')
        call append(line('.')+20, 'if __name__ == \"__main__\":')
        call append(line('.')+21, '\tmain()')
        call append(line('.')+22, '')
    elseif l:type ==? 'go'
        call append(line('.')+10, 'package main')
        call append(line('.')+11, '')
        call append(line('.')+12, 'import \"fmt\"')
        call append(line('.')+13, '')
        call append(line('.')+14, 'func main(){')
        call append(line('.')+15, '\tfmt.Println(\"\")')
        call append(line('.')+16, '}')
    elseif l:type ==? 'java'
        call append(line('.')+10, 'public class '.expand('%:t:r').' {')
        call append(line('.')+11, '\tpublic static void main(String[] args){')
        call append(line('.')+12, '')
        call append(line('.')+13, '\t}')
        call append(line('.')+14, '')
        call append(line('.')+15, '}')
        call append(line('.')+16, '')
    elseif l:type ==? 'cs'
        call append(line('.')+10, 'using System;')
        call append(line('.')+11, 'using System.Collections.Generic;')
        call append(line('.')+12, 'using System.Text;')
        call append(line('.')+13, '')
        call append(line('.')+14, 'namespace '.expand('%:t:r'))
        call append(line('.')+15, '{')
        call append(line('.')+16, '')
        call append(line('.')+17, '\tclass Program')
        call append(line('.')+18, '\t{')
        call append(line('.')+19, '\t\tstatic void Main(string []args)')
        call append(line('.')+20, '\t\t{')
        call append(line('.')+21, '')
        call append(line('.')+22, '\t\t}')
        call append(line('.')+23, '\t}')
        call append(line('.')+24, '}')
        call append(line('.')+25, '')
    elseif l:type ==? 'rb'
        call append(line('.')+10, '#!/usr/bin/ruby')
        call append(line('.')+11, '')
        call append(line('.')+12, 'def main')
        call append(line('.')+13, '')
        call append(line('.')+14, 'end')
        call append(line('.')+15, '')
        call append(line('.')+16, 'main')
        call append(line('.')+17, '')
    elseif l:type ==? 'pl'
        call append(line('.')+10, '#!/usr/bin/perl -w')
        call append(line('.')+11, 'use strict')
        call append(line('.')+12, 'use Getopt::Std;')
        call append(line('.')+13, '')
        call append(line('.')+14, 'main()')
        call append(line('.')+15, '')
        call append(line('.')+16, 'sub main')
        call append(line('.')+17, '{')
        call append(line('.')+18, '')
        call append(line('.')+19, '}')
        call append(line('.')+20, '')
    elseif l:type ==? 'htm' || l:type ==? 'html'
        call append(line('.')+10, '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> ')
        call append(line('.')+11, '')
        call append(line('.')+12, '<html xmlns=\"http://www.w3.org/1999/xhtml\">')
        call append(line('.')+13, '\t<head>')
        call append(line('.')+14, '\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> ')
        call append(line('.')+15, '\t\t<meta name=\"keywords\" content=\"keywords\" /> ')
        call append(line('.')+16, '\t\t<meta name=\"description\" content=\"description\" /> ')
        call append(line('.')+17, '\t\t<title>TITLE</title> ')
        call append(line('.')+18, '\t</head>')
        call append(line('.')+19, '')
        call append(line('.')+20, '\t<body>')
        call append(line('.')+21, '\t\t<script type=\"text/javascript\">')
        call append(line('.')+22, '')
        call append(line('.')+23, '\t\t</script>')
        call append(line('.')+24, '\t</body>')
        call append(line('.')+25, '</html>')
    elseif l:type ==? 'css'
        call append(line('.')+10, '@CHARSET \"UTF-8\";')
        call append(line('.')+11, '')
    elseif l:type ==? 'xml'
        call append(line('.')+10, '<?xml version=\"1.0\" encoding=\"UTF-8\"?>')
        call append(line('.')+11, '')
    elseif l:type ==? 'asp'
        call append(line('.')+10, '<%@ Language=\"VBScript\" %>')
        call append(line('.')+11, '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> ')
        call append(line('.')+12, '')
        call append(line('.')+13, '<html xmlns=\"http://www.w3.org/1999/xhtml\">')
        call append(line('.')+14, '\t<head>')
        call append(line('.')+15, '\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> ')
        call append(line('.')+16, '\t\t<meta name=\"keywords\" content=\"keywords\" /> ')
        call append(line('.')+17, '\t\t<meta name=\"description\" content=\"description\" /> ')
        call append(line('.')+18, '\t\t<title>TITLE</title> ')
        call append(line('.')+19, '\t</head>')
        call append(line('.')+20, '')
        call append(line('.')+21, '\t<body>')
        call append(line('.')+22, '\t\t<script type=\"text/javascript\">')
        call append(line('.')+23, '')
        call append(line('.')+24, '\t\t</script>')
        call append(line('.')+25, '\t\t<%')
        call append(line('.')+26, '')
        call append(line('.')+27, '\t\t%>')
        call append(line('.')+28, '\t</body>')
        call append(line('.')+29, '</html>')
    elseif l:type ==? 'jsp'
        call append(line('.')+10, '<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>')
        call append(line('.')+11, '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> ')
        call append(line('.')+12, '<html xmlns=\"http://www.w3.org/1999/xhtml\">')
        call append(line('.')+13, '\t<head>')
        call append(line('.')+14, '\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> ')
        call append(line('.')+15, '\t\t<meta name=\"keywords\" content=\"keywords\" /> ')
        call append(line('.')+16, '\t\t<meta name=\"description\" content=\"description\" /> ')
        call append(line('.')+17, '\t\t<title>TITLE</title> ')
        call append(line('.')+18, '\t</head>')
        call append(line('.')+19, '')
        call append(line('.')+20, '\t<body>')
        call append(line('.')+21, '\t\t<script type=\"text/javascript\">')
        call append(line('.')+22, '')
        call append(line('.')+23, '\t\t</script>')
        call append(line('.')+24, '\t\t<%')
        call append(line('.')+25, '')
        call append(line('.')+26, '\t\t%>')
        call append(line('.')+27, '\t</body>')
        call append(line('.')+28, '\t</body>')
        call append(line('.')+29, '</html>')
    elseif l:type ==? 'php'
        call append(line('.')+10, '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> ')
        call append(line('.')+11, '')
        call append(line('.')+12, '<html xmlns=\"http://www.w3.org/1999/xhtml\">')
        call append(line('.')+13, '\t<head>')
        call append(line('.')+14, '\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /> ')
        call append(line('.')+15, '\t\t<meta name=\"keywords\" content=\"keywords\" /> ')
        call append(line('.')+16, '\t\t<meta name=\"description\" content=\"description\" /> ')
        call append(line('.')+17, '\t\t<title>TITLE</title> ')
        call append(line('.')+18, '\t</head>')
        call append(line('.')+19, '')
        call append(line('.')+20, '\t<body>')
        call append(line('.')+21, '\t\t<script type=\"text/javascript\">')
        call append(line('.')+22, '')
        call append(line('.')+23, '\t\t</script>')
        call append(line('.')+24, '\t\t<?php')
        call append(line('.')+25, '')
        call append(line('.')+26, '\t\t?>')
        call append(line('.')+27, '\t</body>')
        call append(line('.')+28, '</html>')
    endif
endfunc
"光标自动置于文件尾部
augroup bnf
    autocmd!
    autocmd BufNewFile * normal G $
augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""按F5编译运行
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F5> :call CompileRun()<CR>
func! CompileRun()
    exec 'w'
    if search('mpi\.h') != 0
        exec '!mpirun -np 4 ./%<'
    elseif &filetype ==? 'c'
        let l:compilecmd='!gcc '
        let l:compileflag='-o %< '
        if search('mpi\.h') != 0
            let l:compilecmd = '!mpicc '
        endif
        if search('glut\.h') != 0
            let l:compileflag .= ' -lglut -lGLU -lGL '
        endif
        if search('cv\.h') != 0
            let l:compileflag .= ' -lcv -lhighgui -lcvaux '
        endif
        if search('omp\.h') != 0
            let l:compileflag .= ' -fopenmp '
        endif
        if search('math\.h') != 0
            let l:compileflag .= ' -lm '
        endif
        exec l:compilecmd.' % '.l:compileflag
        :!time ./%<
        :!rm -f ./%<
    elseif &filetype ==? 'cpp'
        let l:compilecmd='!g++ '
        let l:compileflag='-o %< '
        if search('mpi\.h') != 0
            let l:compilecmd = '!mpic++ '
        endif
        if search('glut\.h') != 0
            let l:compileflag .= ' -lglut -lGLU -lGL '
        endif
        if search('cv\.h') != 0
            let l:compileflag .= ' -lcv -lhighgui -lcvaux '
        endif
        if search('omp\.h') != 0
            let l:compileflag .= ' -fopenmp '
        endif
        if search('math\.h') != 0
            let l:compileflag .= ' -lm '
        endif
        exec l:compilecmd.' % '.l:compileflag
        :!time ./%<
        :!rm -f ./%<
    elseif &filetype ==? 'java'
        :!javac %
        :!time java %<
    elseif &filetype ==? 'sh'
        :!time bash %
    elseif &filetype ==? 'python'
        :!time python3 %
    elseif &filetype ==? 'html'
        :!firefox % &
    elseif &filetype ==? 'go'
        "":!go build %<
        :!time go run %
    elseif &filetype ==? 'mkd'
        :!~/.vim/markdown.pl % > %.html &
        :!firefox %.html &
    endif
endfunc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""C,C++的调试
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <F6> :call Rungdb()<CR>
func! Rungdb()
    exec 'w'
    exec '!g++ % -g -o %<'
    exec '!gdb ./%<'
endfunc


"代码格式优化化

map <F7> :call Format()<CR><CR>
func! Format()
    exec 'w'
    exec 'Autoformat'
endfunc

map <F8> :call FormatSrc()<CR><CR>

"定义FormartSrc()
func FormatSrc()
    exec 'w'
    if &filetype ==? 'c'
        exec '!astyle --style=ansi -a --suffix=none %'
    elseif &filetype ==? 'cpp' || &filetype ==? 'hpp'
        exec 'r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %> /dev/null 2>&1'
    elseif &filetype ==? 'perl'
        exec '!astyle --style=gnu --suffix=none %'
    elseif &filetype ==? 'py'||&filetype ==? 'python'
        exec 'r !autopep8 -i --aggressive %'
    elseif &filetype ==? 'java'
        exec '!astyle --style=java --suffix=none %'
    elseif &filetype ==? 'jsp'
        exec '!astyle --style=gnu --suffix=none %'
    elseif &filetype ==? 'xml'
        exec '!astyle --style=gnu --suffix=none %'
    else
        exec 'normal gg=G'
        return
    endif
    exec 'e! %'
endfunc
"结束定义FormartSrc


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""实用设置
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('autocmd')
    augroup ac
        autocmd!
        autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
    augroup END
endif


" 为C程序提供自动缩进
"自动补全
"":inoremap ( ()<ESC>i
"":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {<CR>}<ESC>O
":inoremap } <c-r>=ClosePair('}')<CR>
"":inoremap [ []<ESC>i
"":inoremap ] <c-r>=ClosePair(']')<CR>
"":inoremap " ""<ESC>i
"":inoremap ' ''<ESC>i
""function! ClosePair(char)
""  if getline('.')[col('.') - 1] == a:char
""      return "\<Right>"
""  else
""      return a:char
""  endif
""endfunction

"外部粘贴
nnoremap  :set invpaste paste? imap :set invpaste paste? set pastetoggle=
"autocmd InsertEnter * setlocal paste
"autocmd InsertLeave * setlocal nopaste
" when +clipboard
" set clipboard=unnamed

"漂亮显示txt
let g:tlist_txt_settings = 'txt;c:content;f:figures;t:tables'
au BufRead,BufNewFile *.txt setlocal ft=txt


" 能够漂亮地显示.NFO文件
function! SetFileEncodings(encodings)
    let b:myfileencodingsbak=&fileencodings
    let &fileencodings=a:encodings
endfunction
function! RestoreFileEncodings()
    let &fileencodings=b:myfileencodingsbak
    unlet b:myfileencodingsbak
endfunction
augroup auc
    autocmd!
    autocmd BufReadPre *.nfo call SetFileEncodings('cp437')|setambiwidth=single autocmd BufReadPost *.nfo callRestoreFileEncodings()
augroup END

nmap <silent>di :!curl dict://dict.org/d:<cword><CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""taglist"""""""""""""""""""""""""""""""""""""
let g:Tlist_Show_One_File=1     "不同时显示多个文件的tag，只显示当前文件的
let g:Tlist_Exit_OnlyWindow=1   "如果taglist窗口是最后一个窗口，则退出vim
let g:Tlist_Ctags_Cmd='/usr/bin/ctags' "将taglist与ctags关联

execute pathogen#infect()
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off                  " required

" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim

call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'Chiel92/vim-autoformat'
Plugin 'haya14busa/incsearch.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-commentary'
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

""""""""""""""""""""""""""""""""""""""""""""""展示airline效果中其他的实现方式""""""""""""""""""""""""""""""""""""""""""""""
"let g:airline_section_y = 'BN: %{bufnr("%")}'
"let g:airline_section_z = '%LL %03.3b %{printf("%d",line(".")*100/line("$"))}%% %{line(".")}-%{col(".")}'

""""" vim-airline {{{
"nmap <silent> <Leader>r :AirlineRefresh<CR>
"let g:airline_theme='badwolf'
"let g:airline_powerline_fonts=0
"let g:airline_left_sep=''
"let g:airline_right_sep=''
"let g:airline_mode_map = {
"            \ '__' : '-',
"            \ 'n'  : 'N',
"            \ 'i'  : 'I',
"            \ 'R'  : 'R',
"            \ 'c'  : 'C',
"            \ 'v'  : 'V',
"           \ 'V'  : 'V',
"            \ '' : 'V',
"            \ 's'  : 'S',
"            \ 'S'  : 'S',
"            \ '' : 'S',
"            \ }
"let g:airline#extensions#default#layout = [
"  \ [ 'a', 'b', 'c' ],
"  \ [ 'x', 'y', 'z']
"  \ ]
"let g:airline_section_c = '%<%n %F'
"let g:airline_section_x = '%{strlen(&ft) ? &ft : "Noft"}%{&bomb ? " BOM" : ""}'
"let g:airline_section_y = '%{&fileformat} %{(&fenc == "" ? &enc : &fenc)}'
"let g:airline_section_z = '%2l:%-1v/%L'
"""""" }}}
""""""""""""""""""""""""""""""YouCompleteMe Settings""""""""""""""""""""""""""""""""
"Plugin 'Valloric/YouCompleteMe'
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nnoremap <F8> :YcmForceCompileAndDiagnostics<CR>
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"Do not ask when starting vim
"let g:ycm_confirm_extra_conf = 0
"let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_collect_identifiers_from_tag_files = 1
"let g:ycm_semantic_triggers = {}
"let g:ycm_semantic_triggers.c = ['->', '.', ' ', '(', '[', '&']"

"""""""""""""""""""""""""""""""""""""""""""""""""Syntastic""""""""""""""""""""""""""""""""""""""""""""""
"Plugin 'scrooloose/syntastic'
"let g:syntastic_ignore_files=[".*\.py$"]    "禁用对python的检查，python检查用YouCompleteMe自带的pylint
"let g:syntastic_cpp_compiler = '/usr/bin/g++'
"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
"let g:syntastic_python_python_exec = '/usr/bin/python3'
"let g:syntastic_c_checkers = ['gcc', 'make']
"let g:syntastic_cpp_checkers = ['gcc', 'make']
"let g:syntastic_auto_jump=1
"let g:syntastic_check_on_open = 1
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_error_symbol = '✗'
"let g:syntastic_warning_symbol = '⚠'
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_loc_list_height = 6
"let g:syntastic_enable_balloons = 1
"let g:syntastic_enable_highlighting = 0

Plugin 'FuzzyFinder'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'tpope/vim-pathogen'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
let g:molokai_original = 1
"let g:rehash256 = 1
Plugin 'romainl/vim-qf'
Plugin 'godlygeek/csapprox'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-scripts/matchit.zip'
Plugin 'tpope/vim-surround'
Plugin 'lilydjwg/fcitx.vim'
Plugin 'tomlion/vim-solidity'
Plugin 'Raimondi/delimitMate'
Plugin 'Yggdroot/indentLine'
let g:indentLine_color_term = 239

Plugin 'hdima/python-syntax'
let g:python_highlight_all = 1

"Plugin 'kevinw/pyflakes-vim'   "python实时语法检查，可以与Syntastic的python语法检查结合使用
"let g:pyflakes_use_quickfix = 1  "启用quickfix

"Plugin 'WolfgangMehner/vim-plugins'
""AWK-Support: AWK IDE for Vim
""Bash-Support: Bash IDE for Vim
""C-Support: C/C++ IDE for Vim
""LaTeX-Support: LaTeX IDE for Vim
""Perl-Support: Perl IDE for Vim
""Vim-Support: Vim-Script IDE

""""""""""""""""""""""""""""""""""""""""""""""""""""""""nerdtree""""""""""""""""""""""""""""""""""""""""""
Plugin 'scrooloose/nerdtree'
let g:NERDChristmasTree=1
let g:NERDTreeAutoCenter=1
let g:NERDTreeBookmarksFile=$VIM.'\Data\NerdBookmarks.txt'
let g:NERDTreeMouseMode=2
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowFiles=1
let g:NERDTreeShowHidden=1
let g:NERDTreeShowLineNumbers=1
let g:NERDTreeWinPos='left'
let g:NERDTreeWinSize=31
nnoremap <F9> :exe 'NERDTreeToggle'<CR>
"nnoremap f :NERDTreeToggle
"map <F9> :NERDTree<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""rainbow_parentheses"""""""""""""""""""""""""""""
Bundle 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [['brown',       'RoyalBlue3'],['Darkblue',    'SeaGreen3'],['darkgray',    'DarkOrchid3'],['darkgreen',   'firebrick3'],['darkcyan',    'RoyalBlue3'],['darkred',     'SeaGreen3'],['darkmagenta', 'DarkOrchid3'],['brown',       'firebrick3'],['gray',        'RoyalBlue3'],['darkmagenta', 'DarkOrchid3'],['Darkblue',    'firebrick3'],['darkgreen',   'RoyalBlue3'],['darkcyan',    'SeaGreen3'],['darkred',     'DarkOrchid3'],['red',         'firebrick3'],]

" 不加入这行, 防止黑色括号出现, 很难识别
" " \ ['black',       'SeaGreen3'],

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
augroup rpt
    autocmd!
    autocmd VimEnter * RainbowParenthesesToggle
    autocmd Syntax * RainbowParenthesesLoadRound
    autocmd Syntax * RainbowParenthesesLoadSquare
    autocmd Syntax * RainbowParenthesesLoadBraces
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""quickrun""""""""""""""""""""""""""""""""""""""""
Plugin 'thinca/vim-quickrun'
let g:quickrun_config = {'_': {'outputter' : 'message',}}
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F3> :QuickRun<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""vim-go"""""""""""""""""""""""""""""""""""""""""""""""""""""
"Plugin 'fatih/vim-go'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""ale"""""""""""""""""""""""""""""""""""""""""""""""""""""
"始终开启标志列
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
"自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
"在vim自带的状态栏中整合ale
let g:ale_statusline_format = ['✗ %d', '⚠ %d', '✔ OK']
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = '✗'
let g:ale_echo_msg_warning_str = '⚠'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"避免Java调试信息乱码
let g:ale_java_javac_options = '-encoding UTF-8  -J-Duser.language=en'
"文件内容发生变化时不进行检查
let g:ale_lint_on_text_changed = 'never'
"打开文件时进行检查
let g:ale_lint_on_enter = 1
"使用quickfix代替loclist进行错误和警告信息显示
let g:ale_completion_enabled = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
"是否在有警告或错误时打开quickfix窗口
let g:ale_open_list = 0
"quickfix窗口高度
let g:ale_list_window_size = 5
"警告和错误消失, quickfix窗口不关闭
"let g:ale_keep_list_window_open = 1
"纵向显示quickfix窗口
"let g:ale_list_vertical = 1
"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
"<Leader>s触发/关闭语法检查
nmap <Leader>s :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息
nmap <Leader>d :ALEDetail<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""Vimmake"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'skywind3000/vimmake'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""AsyncRun"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'skywind3000/asyncrun.vim'
augroup vimrc
    autocmd QuickFixCmdPost * call asyncrun#quickfix_toggle(8, 1)
    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(10,1)
augroup END
""""""""""""""""""""""""""""""""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<c-b>'
let g:UltiSnipsJumpBackwardTrigger='<c-z>'

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""tagbar"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'majutsushi/tagbar'
nmap <F4> :TagbarToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""ctrlp"""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

""""""""""""""""""""""""""""""""""""""""""""""""""lightline"""""""""""""""""""""""""""""""""""""""""""
"Plugin 'itchyny/lightline.vim'
"set laststatus=2

"""""""""""""""""""""""""""""""""""""""""""""""""vim-airline"""""""""""""""""""""""""""""""""""""""""""
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_powerline_fonts = 1
let g:airline_enable_branch=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled=0
let g:airline_enable_syntastic=0
let g:airline_detect_paste=1
let g:airline_theme='badwolf'         "设置主题
let g:airline_detect_whitespace = 0    "关闭空白符检测
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1    "顶部tab栏显示
let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#csv#column_display = 'Number'
let g:airline#extensions#csv#column_display = 'Name'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.linenr = ''


let g:airline#extensions#default#section_truncate_width = {'b': 79,'x': 60,'y': 88,'z': 45,'warning': 80,'error': 80,}
let g:airline#extensions#default#layout = [[ 'a', 'b', 'c', 'gutter' ],[ 'x', 'y', 'z', 'error', 'warning' ]]
"let g:airline_section_a = airline#section#create(['mode', 'paste', 'capslock', 'iminsert'])
"let g:airline_section_b = airline#section#create(['branch'])
"let g:airline_section_b = '%F%m%r%h%w'
let g:airline_section_c = '[No.%n:%F %{printf("%.2f",getfsize(bufname("%"))/1000.0)}K /%B]'
"let g:airline_section_gutter = airline#section#create(['%='])
"let g:airline_section_gutter = airline#section#create(['branch', 'hunks'])

"let g:airline_section_x = airline#section#create(['branch', 'ffenc'])
let g:airline_section_x = '[%{strftime("%Y-%m-%d %H:%M")}]'
let g:airline_section_y = airline#section#create_right(['ffenc', 'filetype'])
"let g:airline_section_y = '%{&fileformat} %{(&fenc == "" ? &enc : &fenc)} %{strlen(&ft) ? &ft : "Noft"}%{&bomb ? " BOM" : ""}'
"let g:airline_section_y = '[%{strftime("%Y-%m-%d %H:%M")}]'
"let g:airline_section_z = '%#__accent_bold#[%p%% : (%l,%v)/%LL]%#__restore__#'
"let g:airline_section_warning = airline#section#create(['syntastic', 'eclim', 'whitespace'])
let g:asyncrun_status = ''
let g:airline_section_gutter = airline#section#create(['%{g:asyncrun_status}', '%='])


"set noruler
"set laststatus=2
"set statusline=
"set statusline +=%1*\ %n\ %*            "buffer number
"set statusline +=%5*%{&ff}%*            "file format
"set statusline +=%3*%y%*                "file type
"set statusline +=%4*\ %<%F%*            "full path
"set statusline +=%2*%m%*                "modified flag
"set statusline +=%1*%=%5l%*             "current line
"set statusline +=%2*/%L%*               "total lines
"set statusline +=%1*%4v\ %*             "virtual column number
"set statusline +=%2*0x%04B\ %*          "character under cursor
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

